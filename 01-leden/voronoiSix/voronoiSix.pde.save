int num = 350;
int precision = 3;

Recorder r;

Site [] s;

void setup(){
	size(720,468,P3D);
	background(0);

	//	textFont(createFont("Veranda",9));
	//	textMode(SCREEN);
	rectMode(CENTER);
	
	
	frame.setAlwaysOnTop(true);
	r = new Recorder("out","voronoiIO4.avi");
	s = new Site[num];
	smooth();

	float X = 0;
	float Y = 0;
	for(int i =0;i<s.length;i++){
		s[i] = new Site(i);
	}
}

void draw(){
	background(0);

	for(int i =0;i<s.length;i++){
		s[i].live();
	}
	r.add();
}

void fade(int kolik){
	fill(0,kolik);
	noStroke();
	rect(width/2,height/2,width,height);
}

void keyPressed(){
	if(key=='q'){
		r.finish();
		exit();
	}else if(key == 's'){
		save("shot"+nf(frameCount,6)+".png");
		println("shot saved");
	}
}



class Site{
	int id;
	float x,y,tx,ty;
	float speed = 3.0;

	float[][] kol = new float[0][4];
	//float [][] bis = new float[s.length][2];;
	boolean valid[];
	Vector vX = new Vector();
	Vector vY = new Vector();
	Vector poradi = new Vector();

	float dens = 0;

	color c;

	float br = -50.0;

	Site(int _id){
		id=_id;
		tx=x=random(width);
		ty=y= random(height);
		c = color(random(255));
		valid = new boolean[s.length];
	}

	Site(int _id,float _x,float _y){
		id=_id;
		tx=x=_x;
		ty=y= _y;
		c = color(random(255));
		valid = new boolean[s.length];
	}

	void compute(){
		kol = new float[0][4];

		for(int i =0;i<s.length;i++){
			if(i!=id){
				float bisX=lerp(x,s[i].x,0.5);
				float bisY=lerp(y,s[i].y,0.5);
				if(kol.length>0){
					if(visible2(bisX,bisY)<precision){
						kol = (float[][])expand(kol,kol.length+1);
						kol[kol.length-1] = kolmice(x,y,s[i].x,s[i].y);
					}
				}else{
					kol = (float[][])expand(kol,kol.length+1);
					kol[kol.length-1] = kolmice(x,y,s[i].x,s[i].y);

				}
			}
		}

		kol = (float[][])expand(kol,kol.length+1);
		kol[kol.length-1] = kolmice2(x,y,x,br);
		kol = (float[][])expand(kol,kol.length+1);
		kol[kol.length-1] = kolmice2(x,y,width-br,y);
		kol = (float[][])expand(kol,kol.length+1);

		kol[kol.length-1] = kolmice2(x,y,x,height-br);
		kol = (float[][])expand(kol,kol.length+1);

		kol[kol.length-1] = kolmice2(x,y,br,y);


		PVector tmp;
		vX.clear();
		vY.clear();
		//println((Float)vX.get(0));
		for(int i = 0;i<kol.length;i++){
			//if(valid[i]){
			for(int e = 0;e<kol.length;e++){
				if(e!=i){
					tmp = lineIntersection(kol[i][0],kol[i][1],kol[i][2],kol[i][3],
					                       kol[e][0],kol[e][1],kol[e][2],kol[e][3]);
					if(tmp!=null){
						if(visible(tmp.x,tmp.y)){
							if(!exist(tmp.x,tmp.y)){
								vX.add(tmp.x);
								vY.add(tmp.y);
							}
						}
					}
				}
			}
		}
		sortV();

	}

	void live(){
		compute();

		//noStroke();
		//fill(0);
		//rect(x,y,3,3);
		//text(id,x+5,y+5);

		//if(id==0){
		dens = 0;

		for(int i =0;i<poradi.size();i++){
			dens+=dist((float)(Float)vX.get((Integer)poradi.get(i)),
			           (float)(Float)vY.get((Integer)poradi.get(i)),x,y);
		}

		dens /= poradi.size();
		dens = map(dens,3,(width)/20.0,1,0);
		dens=constrain(dens,0,1);

		c = lerpColor(color(#FFFFFF),color(#FFCC00),dens);

		//fill(c,150);
		stroke(c,120);
		fill(c,80);
		//beginShape(POLYGON);
		//println(vX.length);
		//println((Float)vX.elementAt(0));



		/*
		for(int i = 0;i<poradi.size();i++){
			float X2 = (float)(Float)vX.get((Integer)poradi.get(i));
			float Y2 = (float)(Float)vY.get((Integer)poradi.get(i));
			
			
			vertex(lerp(X2,x,0.412),lerp(Y2,y,0.412));
			//text(i,X+5,Y);
			//rect(X,Y,4,4);
	}
		endShape(CLOSE);


		*/

		fill(c,120);

		beginShape(POLYGON);

		//println(vX.length);
		//println((Float)vX.elementAt(0));

		for(int i = 0;i<poradi.size();i++){
			float X2 = (float)(Float)vX.get((Integer)poradi.get(i));
			float Y2 = (float)(Float)vY.get((Integer)poradi.get(i));

			vertex(lerp(X2,x,0.2),lerp(Y2,y,0.2));
			//text(i,X+5,Y);
			//rect(X,Y,4,4);
		}
		endShape(CLOSE);

		noStroke();
		fill(c,100);
		rect(x,y,3,3);

		//text(id,x+5,y+5);
		/*	stroke(0,90);
			for(int i =0;i<kol.length;i++){
				line(kol[i][0],kol[i][1],kol[i][2],kol[i][3]);
			}*/
		//tx+=random(-100,100)/10.0;
		//ty+=random(-100,100)/10.0;

		for(int i =0;i<poradi.size();i++){
			float X = (float)(Float)vX.get((Integer)poradi.get(i));
			float Y = (float)(Float)vY.get((Integer)poradi.get(i));
			//if(id%3==0){
			float dd = dist(X,Y,x,y);
			tx+=(X-tx)/(dd*5.0);
			ty+=(Y-ty)/(dd*5.0);
			//}else{
			//tx-=(X-tx)/(dist(X,Y,x,y)*3.33);
			//ty-=(Y-ty)/(dist(X,Y,x,y)*3.33);

			//}
		}

		tx=constrain(tx,br/2.0,width-br/2.0);
		ty=constrain(ty,br/2.0,height-br/2.0);

		x+=(tx-x)/speed;
		y+=(ty-y)/speed;
		//}
	}
	/*
		void addV(float _x,float _y){
			vX = (float[])expand(vX,vX.length+1);
			vX[vX.length-1] = _x;

			vY = (float[])expand(vY,vY.length+1);
			vY[vY.length-1] = _y;
		}*/

	boolean exist(float _x,float _y){
		boolean answr = false;
		float d;
		for(int i =0;i<vX.size();i++){
			d = (abs((Float)vX.get(i)-_x)+abs((Float)vY.get(i)-_y)) * 1000.0;
			if(d<1){
				answr = true;
			}
		}
		return answr;

	}

	boolean visible(float xx,float yy){
		boolean answr = true;
		PVector a;

		for(int i =0;i<kol.length;i++){
			a = segIntersection(x,y,lerp(x,xx,0.998),lerp(y,yy,0.998),kol[i][0],kol[i][1],kol[i][2],kol[i][3]);
			if(a!=null){
				answr = false;
			}
		}
		return answr;
	}

	int visible2(float xx,float yy){
		int answr = 0;
		PVector a;

		for(int i =0;i<kol.length;i++){

			a = segIntersection(x,y,lerp(x,xx,0.998),lerp(y,yy,0.998),kol[i][0],kol[i][1],kol[i][2],kol[i][3]);
			if(a!=null){
				answr++;
			}
		}
		return answr;
	}
	/*

	float[][] removeDuplicte(){
		float[] rX = new float[0];
		float[] rY = new float[0];
		for(int i = 0;i<vX.length;i++){
			for(int e = 0;e<vX.length;e++){
				if(i!=e){
					if(dist(vX[i],vY[i],vX[e],vY[e])>0.5){
						rX= (float[])expand(rX,rX.length+1);
						rY= (float[])expand(rY,rY.length+1);
						rX[rY.length-1] = vX[i];
						rY[rY.length-1] = vY[i];
					}
				}
			}
		}
		
		float[][] answr = new float[2][rX.length];
		answr[0] = rX;
		answr[1] = rY;
		return answr;
}
	*/

	void sortV(){
		int delka = vX.size();

		poradi.clear();
		Vector thetas =  new Vector();

		for(int i = 0;i<delka;i++){
			thetas.add(angle(i));
		}

		int selector = 0;
		float tmpaa = 1000.0;

		boolean[] sel = new boolean[thetas.size()];
		for(int i = 0;i<thetas.size();i++){

			selector = 0;
			tmpaa = 1000.0;
			//tmpaa = (Float)thetas.get(0);

			for(int q = 0;q<thetas.size();q++){
				if((Float)thetas.get(q)<(tmpaa)&&!sel[q]){
					tmpaa = (Float)thetas.get(q);
					selector = q;
				}
			}
			sel[selector] = true;

			if(poradi.size()>0){
				if(((Float)thetas.get(selector)-(Float)thetas.get((Integer)poradi.get(poradi.size()-1)))>0.25)
					poradi.add(selector);
			}else{
				poradi.add(selector);
			}
		}
		//println ( poradi );
		//println ("---------------");
	}


	float[] kolmice(float x1,float y1,float x2,float y2){
		float A1 = x1-x2;
		float A2 = y1-y2;
		float midX = lerp(x1,x2,0.5);
		float midY = lerp(y1,y2,0.5);
		float resX = midX+A2*100.5;
		float resY = midY-A1*100.5;
		float resX2 = midX-A2*100.5;
		float resY2 = midY+A1*100.5;

		float[] res = {resX,resY,resX2,resY2};
		return res;
	}


	float[] kolmice2(float x1,float y1,float x2,float y2){
		float A1 = x1-x2;
		float A2 = y1-y2;
		float midX = x2;
		float midY = y2;
		float resX = midX+A2*100.5;
		float resY = midY-A1*100.5;
		float resX2 = midX-A2*100.5;
		float resY2 = midY+A1*100.5;

		float[] res = {resX,resY,resX2,resY2};
		return res;
	}


	// Line Segment Intersection
	PVector segIntersection(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4){
		float bx = x2 - x1;
		float by = y2 - y1;
		float dx = x4 - x3;
		float dy = y4 - y3;

		float b_dot_d_perp = bx * dy - by * dx;

		if(b_dot_d_perp == 0) return null;

		float cx = x3 - x1;
		float cy = y3 - y1;

		float t = (cx * dy - cy * dx) / b_dot_d_perp;
		if(t < 0 || t > 1) return null;

		float u = (cx * by - cy * bx) / b_dot_d_perp;
		if(u < 0 || u > 1) return null;

		return new PVector(x1+t*bx, y1+t*by);
	}

	PVector lineIntersection(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4){
		float bx = x2 - x1;
		float by = y2 - y1;
		float dx = x4 - x3;
		float dy = y4 - y3;

		float b_dot_d_perp = bx*dy - by*dx;

		if(b_dot_d_perp == 0) return null;

		float cx = x3-x1;
		float cy = y3-y1;

		float t = (cx*dy - cy*dx) / b_dot_d_perp;

		return new PVector(x1+t*bx, y1+t*by);
	}

	float angle(int b){
		float angle;

		float x1 = (Float)vX.get(b);
		float y1 = (Float)vY.get(b);

		float X = (x1-x);
		float Y = (y1-y);

		PVector vec = new PVector(X,Y);
		vec.normalize();

		if(vec.x==0){
			angle = 0;
		}else{
			angle = atan(vec.y / vec.x);
		}

		float qadr = 0;
		if((vec.x >= 0)&&(vec.y > 0)) qadr = 0;
		if((vec.x <= 0)&&(vec.y > 0)) qadr = 180;
		if((vec.x <= 0)&&(vec.y < 0)) qadr = 180;
		if((vec.x >= 0)&&(vec.y < 0)) qadr = 360;

		angle = degrees(angle)+qadr;

		return angle;
	}
}
